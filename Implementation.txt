For Task2,
There is 2 methods and a ResultType class in the BM25 implementation

The indexer method takes a dir as argument containing the corpus, returns an object of ResultType, which contains inverted index, dl and avdl

The BM25 method take the object of ResultType as argument, print the query result at stdout as well as output a text file. The ranking algorithm is composed in the following step:
	1. BM25 runs in a infinite loop and ends only when query = q
	2. fetch query from stdin
	3. find those target inverted list matching terms in query
	4. create a document-per-term score Map: {docID:score} (if this docID is not a key for this map)
	5. for each docID in the retrieved inverted lists, calculate its score and then update, {docID: score} += {docID: term(i)}
	6. when the traverse is done, return the Map, print it to stdout, output it sorted in decremental order. 

For Task1,
Then only modification needed here is:

	This line should be put into try{} block because it creates a reference for the 100 ranked doc_id. 
		TopScoreDocCollector collector = TopScoreDocCollector.create(100, true);

	Change argument from analyzer to sAnalyzer for this 2 line, because our analyzer is SimpleAnalyzer
		IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_47,analyzer);
		Query q = new QueryParser(Version.LUCENE_47, "contents",analyzer).parse(s);

	Add FileOutputStream and PrintStream to implement file output